[inlinecmt, // ====== struct declarations ====== //\r, 1]
[class, class, 2][id, POLYNOMIAL, 2][opencubr, {, 2]
[public, public, 3][function, function, 3][id, evaluate, 3][colon, :, 3][openpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][closepar, ), 3][returntype, =>, 3][float, float, 3][semi, ;, 3]
[closecubr, }, 4][semi, ;, 4]
[class, class, 6][id, LINEAR, 6][isa, isa, 6][id, POLYNOMIAL, 6][opencubr, {, 6]
[private, private, 7][attribute, attribute, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][attribute, attribute, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][constructor, constructor, 9][colon, :, 9][openpar, (, 9][id, A, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, B, 9][colon, :, 9][float, float, 9][closepar, ), 9][semi, ;, 9]
[public, public, 10][function, function, 10][id, evaluate, 10][colon, :, 10][openpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][closepar, ), 10][returntype, =>, 10][float, float, 10][semi, ;, 10]
[closecubr, }, 11][semi, ;, 11]
[class, class, 13][id, OBJECT, 13][opencubr, {, 13]
[private, private, 14][attribute, attribute, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][attribute, attribute, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[closecubr, }, 16][semi, ;, 16]
[class, class, 18][id, OBJECT2, 18][opencubr, {, 18]
[private, private, 19][attribute, attribute, 19][id, c, 19][colon, :, 19][id, OBJECT, 19][semi, ;, 19]
[private, private, 20][attribute, attribute, 20][id, d, 20][colon, :, 20][integer, integer, 20][semi, ;, 20]
[closecubr, }, 21][semi, ;, 21]
[class, class, 23][id, QUADRATIC, 23][isa, isa, 23][id, POLYNOMIAL, 23][opencubr, {, 23]
[private, private, 24][attribute, attribute, 24][id, a, 24][colon, :, 24][float, float, 24][semi, ;, 24]
[private, private, 25][attribute, attribute, 25][id, b, 25][colon, :, 25][float, float, 25][semi, ;, 25]
[private, private, 26][attribute, attribute, 26][id, c, 26][colon, :, 26][float, float, 26][semi, ;, 26]
[public, public, 27][constructor, constructor, 27][colon, :, 27][openpar, (, 27][id, A, 27][colon, :, 27][float, float, 27][comma, ,, 27][id, B, 27][colon, :, 27][float, float, 27][comma, ,, 27][id, C, 27][colon, :, 27][float, float, 27][closepar, ), 27][semi, ;, 27]
[public, public, 28][function, function, 28][id, evaluate, 28][colon, :, 28][openpar, (, 28][id, x, 28][colon, :, 28][float, float, 28][closepar, ), 28][returntype, =>, 28][float, float, 28][semi, ;, 28]
[closecubr, }, 29][semi, ;, 29]
[function, function, 31][id, QUADRATIC, 31][scopeop, ::, 31][constructor, constructor, 31][openpar, (, 31][id, A, 31][colon, :, 31][float, float, 31][comma, ,, 31][id, B, 31][colon, :, 31][float, float, 31][comma, ,, 31][id, C, 31][colon, :, 31][float, float, 31][closepar, ), 31][opencubr, {, 31]
[localvar, localvar, 32][id, x, 32][colon, :, 32][float, float, 32][semi, ;, 32]
[closecubr, }, 33]
[inlinecmt, // ====== member function implementations ====== //  \r, 35]
[function, function, 36][id, POLYNOMIAL, 36][scopeop, ::, 36][id, evaluate, 36][openpar, (, 36][id, x, 36][colon, :, 36][float, float, 36][closepar, ), 36][returntype, =>, 36][float, float, 36]
[opencubr, {, 37]
[return, return, 38][openpar, (, 38][intnum, 0, 38][closepar, ), 38][semi, ;, 38]
[closecubr, }, 39]
[function, function, 41][id, QUADRATIC, 41][scopeop, ::, 41][id, evaluate, 41][openpar, (, 41][id, x, 41][colon, :, 41][float, float, 41][closepar, ), 41][returntype, =>, 41][float, float, 41]
[opencubr, {, 42]
[localvar, localvar, 43][id, result, 43][colon, :, 43][float, float, 43][semi, ;, 43]
[inlinecmt, //Using Horner's method\r, 44]
[id, result, 45][assign, =, 45][id, a, 45][semi, ;, 45]
[id, result, 46][assign, =, 46][id, result, 46][mult, *, 46][id, x, 46][plus, +, 46][id, b, 46][semi, ;, 46]
[id, result, 47][assign, =, 47][id, result, 47][mult, *, 47][id, x, 47][plus, +, 47][id, c, 47][semi, ;, 47]
[return, return, 48][openpar, (, 48][id, result, 48][closepar, ), 48][semi, ;, 48]
[closecubr, }, 49]
[function, function, 51][id, LINEAR, 51][scopeop, ::, 51][id, evaluate, 51][openpar, (, 51][id, x, 51][colon, :, 51][float, float, 51][closepar, ), 51][returntype, =>, 51][float, float, 51]
[opencubr, {, 52]
[localvar, localvar, 53][id, result, 53][colon, :, 53][float, float, 53][semi, ;, 53]
[id, result, 54][assign, =, 54][floatnum, 0.0, 54][semi, ;, 54]
[id, result, 55][assign, =, 55][id, a, 55][mult, *, 55][id, x, 55][plus, +, 55][id, b, 55][semi, ;, 55]
[return, return, 56][openpar, (, 56][id, result, 56][closepar, ), 56][semi, ;, 56]
[closecubr, }, 57]
[inlinecmt, // ====== main ====== //\r, 59]
[function, function, 60][id, main, 60][openpar, (, 60][closepar, ), 60][returntype, =>, 60][void, void, 60]
[opencubr, {, 61]
[localvar, localvar, 62][id, counter, 62][colon, :, 62][integer, integer, 62][semi, ;, 62]
[localvar, localvar, 63][id, arr, 63][colon, :, 63][integer, integer, 63][opensqbr, [, 63][intnum, 3, 63][closesqbr, ], 63][semi, ;, 63]
[localvar, localvar, 64][id, obj, 64][colon, :, 64][id, OBJECT, 64][semi, ;, 64]
[localvar, localvar, 65][id, objectWithObject, 65][colon, :, 65][id, OBJECT2, 65][semi, ;, 65]
[localvar, localvar, 66][id, f1, 66][colon, :, 66][id, OBJECT2, 66][opensqbr, [, 66][intnum, 2, 66][closesqbr, ], 66][semi, ;, 66]
[localvar, localvar, 67][id, arraysize, 67][colon, :, 67][id, OBJECT, 67][opensqbr, [, 67][intnum, 5, 67][closesqbr, ], 67][opensqbr, [, 67][intnum, 2, 67][closesqbr, ], 67][semi, ;, 67]
[id, counter, 69][assign, =, 69][intnum, 1, 69][mult, *, 69][intnum, 1, 69][semi, ;, 69]
[while, while, 71][openpar, (, 71][id, counter, 71][leq, <=, 71][intnum, 10, 71][closepar, ), 71]
[opencubr, {, 72]
[id, counter, 73][assign, =, 73][id, counter, 73][plus, +, 73][intnum, 1, 73][semi, ;, 73]
[closecubr, }, 74][semi, ;, 74]
[closecubr, }, 75]
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*/, 76]


[inlinecmt, // ====== struct declarations ====== //\r, 1]
[class, class, 2][id, POLYNOMIAL, 2][opencubr, {, 2]
[public, public, 3][function, function, 3][id, evaluate, 3][colon, :, 3][openpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][closepar, ), 3][returntype, =>, 3][float, float, 3][semi, ;, 3]
[closecubr, }, 4][semi, ;, 4]
[class, class, 6][id, LINEAR, 6][isa, isa, 6][id, POLYNOMIAL, 6][opencubr, {, 6]
[private, private, 7][attribute, attribute, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][attribute, attribute, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][constructor, constructor, 9][colon, :, 9][openpar, (, 9][id, A, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, B, 9][colon, :, 9][float, float, 9][closepar, ), 9][semi, ;, 9]
[public, public, 10][function, function, 10][id, evaluate, 10][colon, :, 10][openpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][closepar, ), 10][returntype, =>, 10][float, float, 10][semi, ;, 10]
[closecubr, }, 11][semi, ;, 11]
[class, class, 13][id, OBJECT, 13][opencubr, {, 13]
[private, private, 14][attribute, attribute, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][attribute, attribute, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[closecubr, }, 16][semi, ;, 16]
[class, class, 18][id, QUADRATIC, 18][isa, isa, 18][id, POLYNOMIAL, 18][opencubr, {, 18]
[private, private, 19][attribute, attribute, 19][id, a, 19][colon, :, 19][float, float, 19][semi, ;, 19]
[private, private, 20][attribute, attribute, 20][id, b, 20][colon, :, 20][float, float, 20][semi, ;, 20]
[private, private, 21][attribute, attribute, 21][id, c, 21][colon, :, 21][float, float, 21][semi, ;, 21]
[public, public, 22][constructor, constructor, 22][colon, :, 22][openpar, (, 22][id, A, 22][colon, :, 22][float, float, 22][comma, ,, 22][id, B, 22][colon, :, 22][float, float, 22][comma, ,, 22][id, C, 22][colon, :, 22][float, float, 22][closepar, ), 22][semi, ;, 22]
[public, public, 23][function, function, 23][id, evaluate, 23][colon, :, 23][openpar, (, 23][id, x, 23][colon, :, 23][float, float, 23][closepar, ), 23][returntype, =>, 23][float, float, 23][semi, ;, 23]
[closecubr, }, 24][semi, ;, 24]
[function, function, 26][id, QUADRATIC, 26][scopeop, ::, 26][constructor, constructor, 26][openpar, (, 26][id, A, 26][colon, :, 26][float, float, 26][comma, ,, 26][id, B, 26][colon, :, 26][float, float, 26][comma, ,, 26][id, C, 26][colon, :, 26][float, float, 26][closepar, ), 26][opencubr, {, 26]
[localvar, localvar, 27][id, x, 27][colon, :, 27][float, float, 27][semi, ;, 27]
[closecubr, }, 28]
[inlinecmt, // ====== member function implementations ====== //  \r, 30]
[function, function, 31][id, POLYNOMIAL, 31][scopeop, ::, 31][id, evaluate, 31][openpar, (, 31][id, x, 31][colon, :, 31][float, float, 31][closepar, ), 31][returntype, =>, 31][float, float, 31]
[opencubr, {, 32]
[return, return, 33][openpar, (, 33][intnum, 0, 33][closepar, ), 33][semi, ;, 33]
[closecubr, }, 34]
[function, function, 36][id, QUADRATIC, 36][scopeop, ::, 36][id, evaluate, 36][openpar, (, 36][id, x, 36][colon, :, 36][float, float, 36][closepar, ), 36][returntype, =>, 36][float, float, 36]
[opencubr, {, 37]
[localvar, localvar, 38][id, result, 38][colon, :, 38][float, float, 38][semi, ;, 38]
[inlinecmt, //Using Horner's method\r, 39]
[id, result, 40][assign, =, 40][id, a, 40][semi, ;, 40]
[id, result, 41][assign, =, 41][id, result, 41][mult, *, 41][id, x, 41][plus, +, 41][id, b, 41][semi, ;, 41]
[id, result, 42][assign, =, 42][id, result, 42][mult, *, 42][id, x, 42][plus, +, 42][id, c, 42][semi, ;, 42]
[return, return, 43][openpar, (, 43][id, result, 43][closepar, ), 43][semi, ;, 43]
[closecubr, }, 44]
[function, function, 46][id, LINEAR, 46][scopeop, ::, 46][id, evaluate, 46][openpar, (, 46][id, x, 46][colon, :, 46][float, float, 46][closepar, ), 46][returntype, =>, 46][float, float, 46]
[opencubr, {, 47]
[localvar, localvar, 48][id, result, 48][colon, :, 48][float, float, 48][semi, ;, 48]
[id, result, 49][assign, =, 49][floatnum, 0.0, 49][semi, ;, 49]
[id, result, 50][assign, =, 50][id, a, 50][mult, *, 50][id, x, 50][plus, +, 50][id, b, 50][semi, ;, 50]
[return, return, 51][openpar, (, 51][id, result, 51][closepar, ), 51][semi, ;, 51]
[closecubr, }, 52]
[inlinecmt, // ====== main ====== //\r, 54]
[function, function, 55][id, main, 55][openpar, (, 55][closepar, ), 55][returntype, =>, 55][void, void, 55]
[opencubr, {, 56]
[localvar, localvar, 57][id, f1, 57][colon, :, 57][id, LINEAR, 57][opensqbr, [, 57][intnum, 2, 57][closesqbr, ], 57][semi, ;, 57]
[localvar, localvar, 58][id, arraysize, 58][colon, :, 58][id, OBJECT, 58][opensqbr, [, 58][intnum, 5, 58][closesqbr, ], 58][opensqbr, [, 58][intnum, 2, 58][closesqbr, ], 58][semi, ;, 58]
[localvar, localvar, 59][id, f2, 59][colon, :, 59][id, QUADRATIC, 59][openpar, (, 59][minus, -, 59][floatnum, 2.0, 59][comma, ,, 59][floatnum, 1.0, 59][comma, ,, 59][floatnum, 0.0, 59][closepar, ), 59][semi, ;, 59]
[localvar, localvar, 60][id, counter, 60][colon, :, 60][integer, integer, 60][semi, ;, 60]
[while, while, 62][openpar, (, 62][id, counter, 62][leq, <=, 62][intnum, 10, 62][closepar, ), 62]
[opencubr, {, 63]
[write, write, 64][openpar, (, 64][id, counter, 64][closepar, ), 64][semi, ;, 64]
[write, write, 65][openpar, (, 65][id, f1, 65][dot, ., 65][id, evaluate, 65][openpar, (, 65][id, counter, 65][closepar, ), 65][closepar, ), 65][semi, ;, 65]
[write, write, 66][openpar, (, 66][id, f2, 66][dot, ., 66][id, evaluate, 66][openpar, (, 66][id, counter, 66][closepar, ), 66][closepar, ), 66][semi, ;, 66]
[closecubr, }, 67][semi, ;, 67]
[closecubr, }, 68]
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*/, 69]


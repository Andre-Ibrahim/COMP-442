[inlinecmt, // ====== struct declarations ====== //\r, 1]
[class, class, 2][id, POLYNOMIAL, 2][opencubr, {, 2]
[public, public, 3][function, function, 3][id, evaluate, 3][colon, :, 3][openpar, (, 3][id, x, 3][colon, :, 3][float, float, 3][closepar, ), 3][returntype, =>, 3][float, float, 3][semi, ;, 3]
[closecubr, }, 4][semi, ;, 4]
[class, class, 6][id, LINEAR, 6][isa, isa, 6][id, POLYNOMIAL, 6][opencubr, {, 6]
[private, private, 7][attribute, attribute, 7][id, a, 7][colon, :, 7][float, float, 7][semi, ;, 7]
[private, private, 8][attribute, attribute, 8][id, b, 8][colon, :, 8][float, float, 8][semi, ;, 8]
[public, public, 9][constructor, constructor, 9][colon, :, 9][openpar, (, 9][id, A, 9][colon, :, 9][float, float, 9][comma, ,, 9][id, B, 9][colon, :, 9][float, float, 9][closepar, ), 9][semi, ;, 9]
[public, public, 10][function, function, 10][id, evaluate, 10][colon, :, 10][openpar, (, 10][id, x, 10][colon, :, 10][float, float, 10][closepar, ), 10][returntype, =>, 10][float, float, 10][semi, ;, 10]
[closecubr, }, 11][semi, ;, 11]
[class, class, 13][id, QUADRATIC, 13][isa, isa, 13][id, POLYNOMIAL, 13][opencubr, {, 13]
[private, private, 14][attribute, attribute, 14][id, a, 14][colon, :, 14][float, float, 14][semi, ;, 14]
[private, private, 15][attribute, attribute, 15][id, b, 15][colon, :, 15][float, float, 15][semi, ;, 15]
[private, private, 16][attribute, attribute, 16][id, c, 16][colon, :, 16][float, float, 16][semi, ;, 16]
[public, public, 17][constructor, constructor, 17][colon, :, 17][openpar, (, 17][id, A, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, B, 17][colon, :, 17][float, float, 17][comma, ,, 17][id, C, 17][colon, :, 17][float, float, 17][closepar, ), 17][semi, ;, 17]
[public, public, 18][function, function, 18][id, evaluate, 18][colon, :, 18][openpar, (, 18][id, x, 18][colon, :, 18][float, float, 18][closepar, ), 18][returntype, =>, 18][float, float, 18][semi, ;, 18]
[closecubr, }, 19][semi, ;, 19]
[function, function, 21][id, QUADRATIC, 21][scopeop, ::, 21][constructor, constructor, 21][openpar, (, 21][id, A, 21][colon, :, 21][float, float, 21][comma, ,, 21][id, B, 21][colon, :, 21][float, float, 21][comma, ,, 21][id, C, 21][colon, :, 21][float, float, 21][closepar, ), 21][opencubr, {, 21]
[localvar, localvar, 22][id, x, 22][colon, :, 22][float, float, 22][semi, ;, 22]
[closecubr, }, 23]
[inlinecmt, // ====== member function implementations ====== //  \r, 25]
[function, function, 26][id, POLYNOMIAL, 26][scopeop, ::, 26][id, evaluate, 26][openpar, (, 26][id, x, 26][colon, :, 26][float, float, 26][closepar, ), 26][returntype, =>, 26][float, float, 26]
[opencubr, {, 27]
[return, return, 28][openpar, (, 28][intnum, 0, 28][closepar, ), 28][semi, ;, 28]
[closecubr, }, 29]
[function, function, 31][id, QUADRATIC, 31][scopeop, ::, 31][id, evaluate, 31][openpar, (, 31][id, x, 31][colon, :, 31][float, float, 31][closepar, ), 31][returntype, =>, 31][float, float, 31]
[opencubr, {, 32]
[localvar, localvar, 33][id, result, 33][colon, :, 33][float, float, 33][semi, ;, 33]
[inlinecmt, //Using Horner's method\r, 34]
[id, result, 35][assign, =, 35][id, a, 35][semi, ;, 35]
[id, result, 36][assign, =, 36][id, result, 36][mult, *, 36][id, x, 36][plus, +, 36][id, b, 36][semi, ;, 36]
[id, result, 37][assign, =, 37][id, result, 37][mult, *, 37][id, x, 37][plus, +, 37][id, c, 37][semi, ;, 37]
[return, return, 38][openpar, (, 38][id, result, 38][closepar, ), 38][semi, ;, 38]
[closecubr, }, 39]
[function, function, 41][id, QUADRATIC, 41][scopeop, ::, 41][constructor, constructor, 41][openpar, (, 41][id, A, 41][colon, :, 41][float, float, 41][comma, ,, 41][id, B, 41][colon, :, 41][float, float, 41][closepar, ), 41]
[opencubr, {, 42]
[id, a, 43][assign, =, 43][id, A, 43][semi, ;, 43]
[id, b, 44][assign, =, 44][id, B, 44][semi, ;, 44]
[closecubr, }, 45]
[function, function, 47][id, LINEAR, 47][scopeop, ::, 47][id, evaluate, 47][openpar, (, 47][id, x, 47][colon, :, 47][float, float, 47][closepar, ), 47][returntype, =>, 47][float, float, 47]
[opencubr, {, 48]
[localvar, localvar, 49][id, result, 49][colon, :, 49][float, float, 49][semi, ;, 49]
[id, result, 50][assign, =, 50][floatnum, 0.0, 50][semi, ;, 50]
[id, result, 51][assign, =, 51][id, a, 51][mult, *, 51][id, x, 51][plus, +, 51][id, b, 51][semi, ;, 51]
[return, return, 52][openpar, (, 52][id, result, 52][closepar, ), 52][semi, ;, 52]
[closecubr, }, 53]
[inlinecmt, // ====== main ====== //\r, 55]
[function, function, 56][id, main, 56][openpar, (, 56][closepar, ), 56][returntype, =>, 56][void, void, 56]
[opencubr, {, 57]
[localvar, localvar, 58][id, f1, 58][colon, :, 58][id, LINEAR, 58][opensqbr, [, 58][intnum, 2, 58][closesqbr, ], 58][semi, ;, 58]
[localvar, localvar, 59][id, f2, 59][colon, :, 59][id, QUADRATIC, 59][openpar, (, 59][minus, -, 59][floatnum, 2.0, 59][comma, ,, 59][floatnum, 1.0, 59][comma, ,, 59][floatnum, 0.0, 59][closepar, ), 59][semi, ;, 59]
[while, while, 61][openpar, (, 61][id, counter, 61][leq, <=, 61][intnum, 10, 61][closepar, ), 61]
[opencubr, {, 62]
[write, write, 63][openpar, (, 63][id, counter, 63][closepar, ), 63][semi, ;, 63]
[write, write, 64][openpar, (, 64][id, f1, 64][dot, ., 64][id, evaluate, 64][openpar, (, 64][id, counter, 64][closepar, ), 64][closepar, ), 64][semi, ;, 64]
[write, write, 65][openpar, (, 65][id, f2, 65][dot, ., 65][id, evaluate, 65][openpar, (, 65][id, counter, 65][closepar, ), 65][closepar, ), 65][semi, ;, 65]
[closecubr, }, 66][semi, ;, 66]
[closecubr, }, 67]
[blockcmt, /*\r\n    classes\r\n    --------------------------------------\r\n| | no class declaration\r\n| | class declaration\r\n|X| multiple class declarations\r\n|X| no data member declaration\r\n|X| data member declaration\r\n|X| multiple data member declaration\r\n| | no member function declaration\r\n|X| member function declaration\r\n|X| multiple member function declaration\r\n| | no member\r\n|X| no inherited class\r\n|X| one inherited class\r\n| | multiple inherited classes\r\n|X| private member specifier\r\n|X| public member specifier\r\n\r\n    functions: definitions\r\n    --------------------------------------\r\n| | no main function definition\r\n|X| main function definition\r\n|X| no free function definition\r\n| | free function definition\r\n| | multiple free function definitions\r\n| | no member function definition\r\n|X| member function definition\r\n|X| multiple member function definitions\r\n| | return type: void\r\n| | return type: integer\r\n|X| return type: float\r\n|X| return type: id\r\n| | return type: array (not allowed)\r\n\r\n    functions: formal parameters\r\n    --------------------------------------\r\n| | type: integer\r\n|X| type: float\r\n| | type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    functions: calls\r\n    --------------------------------------\r\n| | free function call\r\n|X| member function call\r\n| | parameters:0\r\n|X| parameters:1\r\n|X| parameters:n\r\n| | array parameter - 1-dim\r\n| | array parameter - n-dim\r\n| | array parameter - with size\r\n| | array parameter - without size\r\n| | function call as statement\r\n|X| function call as expression factor\r\n| | expression as parameter\r\n\r\n    variable declaration\r\n    --------------------------------------\r\n| | type: integer\r\n| | type: float\r\n| | type: string\r\n|X| type: id\r\n| | type: 1-dim array \r\n| | type: n-dim array\r\n| | type: array (with size)\r\n| | type: array (without size)\r\n\r\n    function body: local variable declarations\r\n    --------------------------------------\r\n| | no local variable declarations\r\n|X| local variable declarations\r\n| | intertwined statements and variable declarations\r\n\r\n    function body: statements\r\n    --------------------------------------\r\n| | no statement\r\n| | 1 statement\r\n|X| n statements\r\n| | if statement\r\n| | if: empty then or else blocks\r\n| | if: 1-statement then or else blocks\r\n| | if: n-statements then or else blocks\r\n|X| while statement\r\n| | while: empty block\r\n| | while: 1-statement block\r\n|X| while: n-statement block\r\n| | read(<variable>) statement\r\n|X| write(<expr>) statement\r\n|X| return(<expr>) statement\r\n|X| assignment statement\r\n\r\n    variable + idnest\r\n    --------------------------------------\r\n|X| id\r\n|X| id.id\r\n|X| id.id(id)\r\n| | id(id).id\r\n| | id(id).id()\r\n| | id.id[id]\r\n| | id[id].id\r\n| | id[id].id[id]\r\n| | id.id[id][id]\r\n| | id[id][id].id\r\n| | id[id][id].id[id][id]\r\n| | id(id).id[id]\r\n| | id(id).id[id][id]\r\n| | expression as array index\r\n\r\n    expressions\r\n    --------------------------------------\r\n| | single variable\r\n| | involving addop\r\n| | involving multop\r\n| | involving relop\r\n|X| involving addop + multop\r\n| | involving multop + relop\r\n| | involving addop + multop + relop\r\n| | involving parentheses\r\n| | involving nested parenhteses\r\n| | involving not\r\n| | involving sign\r\n| | involving literals\r\n|X| involving variable + idnest\r\n|X| involving function calls\r\n| | involving all the above in one expression\r\n*/, 68]

